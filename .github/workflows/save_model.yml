name: Move MLflow Model

on:
  push:
    paths:
      - mlruns/**  # Trigger the action only if changes occur in the mlruns directory

jobs:
  move-model:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install MLflow and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mlflow

    - name: Locate the latest MLflow run ID
      id: get-run-id
      run: |
        echo "Finding the latest run ID..."
        latest_run_id=$(python - << 'EOF'
        import os
        import glob
        
        try:
            # Path to the mlruns/0 directory
            mlruns_dir = 'mlruns/0'
        
            # Get the list of subdirectories (runs) sorted by modification time
            run_dirs = sorted(glob.glob(os.path.join(mlruns_dir, '*')), key=os.path.getmtime, reverse=True)
        
            # Get the ID of the latest run (most recent)
            latest_run_id = os.path.basename(run_dirs[0]) if run_dirs else ''
            print(latest_run_id)
        except Exception as e:
            print(f"Error: {e}")
            exit(1)
        EOF
        )
        echo "Latest run ID: $latest_run_id"
        echo "::set-output name=RUN_ID::$latest_run_id"

    - name: Move model to apps/model
      run: |
        latest_run_id=${{ steps.get-run-id.outputs.RUN_ID }}
        if [ -z "$latest_run_id" ]; then
          echo "No latest run ID found. Exiting."
          exit 1
        fi
        echo "Copying model from run ID: $latest_run_id"
        mkdir -p apps/model
        cp -r mlruns/0/$latest_run_id/artifacts/model/* apps/model/
        
    - name: Commit and push changes
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add apps/model/*
        git commit -m "Update model from latest MLflow run $latest_run_id"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
